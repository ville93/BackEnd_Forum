// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyChat.Data;

#nullable disable

namespace MyChat.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231230091413_classes")]
    partial class classes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyChat.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Celebrity"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 4,
                            Name = "General"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Politics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Football Fever"
                        });
                });

            modelBuilder.Entity("MyChat.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Discussions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChannelId = 1,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9132),
                            Title = "Entrepreneurship Tips"
                        },
                        new
                        {
                            Id = 2,
                            ChannelId = 1,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9189),
                            Title = "Marketing Strategies"
                        },
                        new
                        {
                            Id = 3,
                            ChannelId = 2,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9192),
                            Title = "Recent Celebrity News"
                        },
                        new
                        {
                            Id = 4,
                            ChannelId = 2,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9194),
                            Title = "Favorite Celebrity Moments"
                        },
                        new
                        {
                            Id = 5,
                            ChannelId = 3,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9197),
                            Title = "Favorite Video Games"
                        },
                        new
                        {
                            Id = 6,
                            ChannelId = 3,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9199),
                            Title = "Upcoming Game Releases"
                        },
                        new
                        {
                            Id = 7,
                            ChannelId = 4,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9202),
                            Title = "Favorite Books"
                        },
                        new
                        {
                            Id = 8,
                            ChannelId = 4,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9205),
                            Title = "What is happening?"
                        },
                        new
                        {
                            Id = 9,
                            ChannelId = 5,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9207),
                            Title = "Election Season"
                        },
                        new
                        {
                            Id = 10,
                            ChannelId = 5,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9209),
                            Title = "Foreign Relations"
                        },
                        new
                        {
                            Id = 11,
                            ChannelId = 6,
                            CreatedAt = new DateTime(2023, 12, 30, 10, 14, 12, 717, DateTimeKind.Local).AddTicks(9212),
                            Title = "Who's excited for the upcoming football season?"
                        },
                        new
                        {
                            Id = 12,
                            ChannelId = 6,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 14, 12, 717, DateTimeKind.Local).AddTicks(9215),
                            Title = "Basketball Talk"
                        });
                });

            modelBuilder.Entity("MyChat.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "What are some valuable tips for starting a successful business?",
                            DiscussionId = 1,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9260)
                        },
                        new
                        {
                            Id = 2,
                            Content = "In my experience, focusing on customer needs is crucial!",
                            DiscussionId = 1,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9266)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Let's discuss effective marketing strategies.",
                            DiscussionId = 2,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9269)
                        },
                        new
                        {
                            Id = 4,
                            Content = "I've found social media marketing to be quite impactful.",
                            DiscussionId = 2,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9272)
                        },
                        new
                        {
                            Id = 5,
                            Content = "What's the latest celebrity gossip or news you've heard?",
                            DiscussionId = 3,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9274)
                        },
                        new
                        {
                            Id = 6,
                            Content = "I heard there's a new blockbuster movie in the making!",
                            DiscussionId = 3,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9279)
                        },
                        new
                        {
                            Id = 7,
                            Content = "What are some of your all-time favorite celebrity moments?",
                            DiscussionId = 4,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9281)
                        },
                        new
                        {
                            Id = 8,
                            Content = "I loved that awards ceremony last year. Memorable performances!",
                            DiscussionId = 4,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9284)
                        },
                        new
                        {
                            Id = 9,
                            Content = "What are your all-time favorite video games?",
                            DiscussionId = 5,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9286)
                        },
                        new
                        {
                            Id = 10,
                            Content = "I can't get enough of The Witcher 3. What about you?",
                            DiscussionId = 5,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9290)
                        },
                        new
                        {
                            Id = 11,
                            Content = "Any exciting upcoming game releases you're looking forward to?",
                            DiscussionId = 6,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9292)
                        },
                        new
                        {
                            Id = 12,
                            Content = "I can't wait for the next installment of the Assassin's Creed series!",
                            DiscussionId = 6,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9295)
                        },
                        new
                        {
                            Id = 13,
                            Content = "Share your favorite books and why you love them.",
                            DiscussionId = 7,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9297)
                        },
                        new
                        {
                            Id = 14,
                            Content = "I recently read 'The Great Gatsby' – such a classic!",
                            DiscussionId = 7,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9299)
                        },
                        new
                        {
                            Id = 15,
                            Content = "Discussing important things.",
                            DiscussionId = 8,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9302)
                        },
                        new
                        {
                            Id = 16,
                            Content = "Any thoughts?",
                            DiscussionId = 8,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9304)
                        },
                        new
                        {
                            Id = 17,
                            Content = "With the election season approaching, what are your predictions?",
                            DiscussionId = 9,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9307)
                        },
                        new
                        {
                            Id = 18,
                            Content = "I believe the debates will play a crucial role this time.",
                            DiscussionId = 9,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9311)
                        },
                        new
                        {
                            Id = 19,
                            Content = "Let's discuss the current state of foreign relations.",
                            DiscussionId = 10,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9313)
                        },
                        new
                        {
                            Id = 20,
                            Content = "The recent summit had some interesting outcomes.",
                            DiscussionId = 10,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9316)
                        },
                        new
                        {
                            Id = 21,
                            Content = "I can't wait to see my favorite team in action!",
                            DiscussionId = 10,
                            Timestamp = new DateTime(2023, 12, 30, 10, 44, 12, 717, DateTimeKind.Local).AddTicks(9318)
                        },
                        new
                        {
                            Id = 22,
                            Content = "Predictions for the championship winner?",
                            DiscussionId = 11,
                            Timestamp = new DateTime(2023, 12, 30, 10, 54, 12, 717, DateTimeKind.Local).AddTicks(9321)
                        },
                        new
                        {
                            Id = 23,
                            Content = "Let's discuss the latest basketball games!",
                            DiscussionId = 12,
                            Timestamp = new DateTime(2023, 12, 30, 10, 34, 12, 717, DateTimeKind.Local).AddTicks(9323)
                        },
                        new
                        {
                            Id = 24,
                            Content = "Who's your favorite basketball team?",
                            DiscussionId = 12,
                            Timestamp = new DateTime(2023, 12, 30, 10, 59, 12, 717, DateTimeKind.Local).AddTicks(9326)
                        });
                });

            modelBuilder.Entity("MyChat.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyChat.Models.Discussion", b =>
                {
                    b.HasOne("MyChat.Models.Channel", null)
                        .WithMany("Discussions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyChat.Models.Message", b =>
                {
                    b.HasOne("MyChat.Models.Discussion", null)
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyChat.Models.Channel", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("MyChat.Models.Discussion", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
